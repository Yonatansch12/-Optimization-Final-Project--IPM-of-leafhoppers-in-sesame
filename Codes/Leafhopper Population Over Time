import numpy as np
import matplotlib.pyplot as plt

# Parameters
n0 = 750  # initial leafhopper population
r = 4  # intrinsic growth rate
K = 10000  # carrying capacity
Ec = 0.85  # chemical pesticide efficiency
Eb = 0.7  # biological pesticide efficiency
Ecomb = 0.95  # combined IPM efficiency
Cc = 6  # cost of chemical pesticide per treatment
Cb = 7.35  # cost of biological pesticide per treatment
Ccomb = 6.675  # cost of combined IPM per treatment
P = 2.4  # market price of sesame per kg
Cd = 0.048  # cost of damage per plant
k = 1.5  # yield loss in plants per 10 leafhoppers
weeks = 15  # total time in weeks
seed_yield_loss_per_plant = 0.02  # seed loss per plant in kg

# Function to calculate population over time
def calculate_population(n0, r, K, E, weeks):
    population = np.zeros(weeks)
    population[0] = n0
    for t in range(1, weeks):
        population[t] = population[t-1] + r * population[t-1] * (1 - population[t-1] / K) - E * population[t-1]
        if population[t] < 0:
            population[t] = 0
    return population

# Function to calculate population without treatment over time
def calculate_population_no_treatment(n0, r, K, weeks):
    population = np.zeros(weeks)
    population[0] = n0
    for t in range(1, weeks):
        population[t] = population[t-1] + r * population[t-1] * (1 - population[t-1] / K)
        if population[t] > K:
            population[t] = K
        if population[t] < 0:
            population[t] = 0
    return population

# Function to calculate costs over time and track treatments
def calculate_costs(population, E, Ct, Cd, k, weeks):
    damages = (population / 10) * k * Cd
    treatment_costs = np.zeros(weeks)
    total_costs = np.zeros(weeks)
    cumulative_costs = np.zeros(weeks)
    treatment_weeks = []
    cumulative_cost = 0
    for t in range(weeks):
        if damages[t] > Ct:
            treatment_costs[t] = Ct
            population[t] *= (1 - E)
            treatment_weeks.append(t)
        total_costs[t] = damages[t] + treatment_costs[t]
        cumulative_cost += total_costs[t]
        cumulative_costs[t] = cumulative_cost
    return cumulative_costs, treatment_weeks

# Function to calculate costs without treatment
def calculate_costs_no_treatment(population, Cd, k, weeks):
    damages = (population / 10) * k * Cd
    total_costs = np.zeros(weeks)
    cumulative_costs = np.zeros(weeks)
    cumulative_cost = 0
    for t in range(weeks):
        total_costs[t] = damages[t]
        cumulative_cost += total_costs[t]
        cumulative_costs[t] = cumulative_cost
    return cumulative_costs

# Calculate population and costs for each treatment
pop_chemical = calculate_population(n0, r, K, Ec, weeks)
pop_biological = calculate_population(n0, r, K, Eb, weeks)
pop_combined = calculate_population(n0, r, K, Ecomb, weeks)
pop_no_treatment = calculate_population_no_treatment(n0, r, K, weeks)

costs_chemical, treatment_weeks_chemical = calculate_costs(pop_chemical, Ec, Cc, Cd, k, weeks)
costs_biological, treatment_weeks_biological = calculate_costs(pop_biological, Eb, Cb, Cd, k, weeks)
costs_combined, treatment_weeks_combined = calculate_costs(pop_combined, Ecomb, Ccomb, Cd, k, weeks)
costs_no_treatment = calculate_costs_no_treatment(pop_no_treatment, Cd, k, weeks)

# Plotting population over time
plt.figure(figsize=(10, 6))
plt.plot(range(weeks), pop_chemical, label='Chemical Treatment')
plt.plot(range(weeks), pop_biological, label='Biological Treatment')
plt.plot(range(weeks), pop_combined, label='Combined IPM Treatment')
plt.plot(range(weeks), pop_no_treatment, label='No Treatment', linestyle='--')
plt.xlabel('Weeks')
plt.ylabel('Leafhopper Population')
plt.title('Leafhopper Population Over Time')
plt.legend()
plt.grid(True)
plt.show()

# Plotting cumulative costs over time
plt.figure(figsize=(10, 6))
plt.plot(range(weeks), costs_chemical, label='Chemical Treatment')
plt.plot(range(weeks), costs_biological, label='Biological Treatment')
plt.plot(range(weeks), costs_combined, label='Combined IPM Treatment')
plt.plot(range(weeks), costs_no_treatment, label='No Treatment', linestyle='--')
plt.xlabel('Weeks')
plt.ylabel('Cumulative Overall Costs ($)')
plt.title('Cumulative Overall Costs Over Time')
plt.legend()
plt.grid(True)
plt.show()

# Finding the best treatment strategy
total_cost_chemical = costs_chemical[-1]
total_cost_biological = costs_biological[-1]
total_cost_combined = costs_combined[-1]
total_cost_no_treatment = costs_no_treatment[-1]

print(f"Total cost for Chemical Treatment: ${total_cost_chemical:.2f}")
print(f"Total cost for Biological Treatment: ${total_cost_biological:.2f}")
print(f"Total cost for Combined IPM Treatment: ${total_cost_combined:.2f}")
print(f"Total cost for No Treatment: ${total_cost_no_treatment:.2f}")

min_cost = min(total_cost_chemical, total_cost_biological, total_cost_combined, total_cost_no_treatment)
if min_cost == total_cost_chemical:
    best_strategy = "Chemical Treatment"
    best_treatment_weeks = treatment_weeks_chemical
elif min_cost == total_cost_biological:
    best_strategy = "Biological Treatment"
    best_treatment_weeks = treatment_weeks_biological
elif min_cost == total_cost_combined:
    best_strategy = "Combined IPM Treatment"
    best_treatment_weeks = treatment_weeks_combined
else:
    best_strategy = "No Treatment"
    best_treatment_weeks = []

print(f"The best strategy to handle the leafhopper population, considering the overall costs, is: {best_strategy}")
print(f"Treatment weeks for the best strategy: {best_treatment_weeks}")

# Total Cost Calculation
total_cost_chemical = np.sum(costs_chemical)
total_cost_biological = np.sum(costs_biological)
total_cost_combined = np.sum(costs_combined)
total_cost_no_treatment = np.sum(costs_no_treatment)

# Total Yield Loss Calculation
total_yield_loss_chemical = np.sum((pop_chemical / 10) * k)
total_yield_loss_biological = np.sum((pop_biological / 10) * k)
total_yield_loss_combined = np.sum((pop_combined / 10) * k)
total_yield_loss_no_treatment = np.sum((pop_no_treatment / 10) * k)

# Calculate total damage costs
total_damage_cost_chemical = total_yield_loss_chemical * Cd
total_damage_cost_biological = total_yield_loss_biological * Cd
total_damage_cost_combined = total_yield_loss_combined * Cd
total_damage_cost_no_treatment = total_yield_loss_no_treatment * Cd

# Print statements for total damage costs
print(f"Total damage cost for Chemical Treatment: ${total_damage_cost_chemical:.2f}")
print(f"Total damage cost for Biological Treatment: ${total_damage_cost_biological:.2f}")
print(f"Total damage cost for Combined IPM Treatment: ${total_damage_cost_combined:.2f}")
print(f"Total damage cost for No Treatment: ${total_damage_cost_no_treatment:.2f}")

# Total Costs
print(f"Total cost for Chemical Treatment: ${total_cost_chemical:.2f}")
print(f"Total cost for Biological Treatment: ${total_cost_biological:.2f}")
print(f"Total cost for Combined IPM Treatment: ${total_cost_combined:.2f}")
print(f"Total cost for No Treatment: ${total_cost_no_treatment:.2f}")

# Total Yield Loss due to Leafhopper Infestation
print(f"Total yield loss for Chemical Treatment: {total_yield_loss_chemical:.2f} plants")
print(f"Total yield loss for Biological Treatment: {total_yield_loss_biological:.2f} plants")
print(f"Total yield loss for Combined IPM Treatment: {total_yield_loss_combined:.2f} plants")
print(f"Total yield loss for No Treatment: {total_yield_loss_no_treatment:.2f} plants")

# Seed loss calculation
total_seed_loss_chemical = total_yield_loss_chemical * seed_yield_loss_per_plant
total_seed_loss_biological = total_yield_loss_biological * seed_yield_loss_per_plant
total_seed_loss_combined = total_yield_loss_combined * seed_yield_loss_per_plant
total_seed_loss_no_treatment = total_yield_loss_no_treatment * seed_yield_loss_per_plant

# Print statements for seed loss
print(f"Total seed loss for Chemical Treatment: {total_seed_loss_chemical:.2f} kg")
print(f"Total seed loss for Biological Treatment: {total_seed_loss_biological:.2f} kg")
print(f"Total seed loss for Combined IPM Treatment: {total_seed_loss_combined:.2f} kg")
print(f"Total seed loss for No Treatment: {total_seed_loss_no_treatment:.2f} kg")

# Treatments and corresponding values for plotting
treatments = ['Chemical', 'Biological', 'Combined IPM', 'No Treatment']
total_costs = [total_cost_chemical, total_cost_biological, total_cost_combined, total_cost_no_treatment]
total_damage_costs = [total_damage_cost_chemical, total_damage_cost_biological, total_damage_cost_combined, total_damage_cost_no_treatment]
total_seed_losses = [total_seed_loss_chemical, total_seed_loss_biological, total_seed_loss_combined, total_seed_loss_no_treatment]
total_yield_losses = [total_yield_loss_chemical, total_yield_loss_biological, total_yield_loss_combined, total_yield_loss_no_treatment]
total_treatment_costs = [np.sum(costs_chemical), np.sum(costs_biological), np.sum(costs_combined), 0]

# Plotting total costs
plt.figure(figsize=(10, 12))

plt.subplot(4, 1, 1)
plt.bar(treatments, total_costs, color='skyblue')
plt.xlabel('Treatment Method')
plt.ylabel('Total Cost ($)')
plt.title('Total Costs of Different Pest Control Methods')

# Plotting total damage costs
plt.subplot(4, 1, 2)
plt.bar(treatments, total_damage_costs, color='lightgreen')
plt.xlabel('Treatment Method')
plt.ylabel('Total Damage Cost ($)')
plt.title('Total Damage Costs of Different Pest Control Methods')

# Plotting total treatment costs
plt.subplot(4, 1, 3)
plt.bar(treatments, total_treatment_costs, color='lightcoral')
plt.xlabel('Treatment Method')
plt.ylabel('Total Treatment Cost ($)')
plt.title('Total Treatment Costs of Different Pest Control Methods')

# Plotting total yield losses
plt.subplot(4, 1, 4)
plt.bar(treatments, total_yield_losses, color='salmon')
plt.xlabel('Treatment Method')
plt.ylabel('Total Yield Loss (plants)')
plt.title('Total Yield Loss of Different Pest Control Methods')

plt.tight_layout()
plt.show()
